{"version":3,"sources":["components/Header.js","components/Topic.js","components/Card.js","components/Cards.js","components/Spinner.js","components/CountInfo.js","components/Options.js","components/Search.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Topic","helper","useState","topic","updateTopic","onSubmit","e","preventDefault","fetch_topic_cards","handle_submit","Grid","container","spacing","alignItems","item","TextField","required","onChange","target","value","id","label","Card","info","prompt","answer","search_phrase","display","toUpperCase","includes","re","RegExp","replace","x","dangerouslySetInnerHTML","__html","error","console","log","Cards","cards","map","card","key","toString","Spinner","state","CircularProgress","CountInfo","data","card_count","set_count","Options","uniquify","setUniquify","sorted","setSorted","FormGroup","row","FormControlLabel","control","Switch","checked","event","apply_sort","name","apply_uniqueness","Search","apply_search","Footer","socket","type","status","href","rel","App","updateCards","unsorted_cards","update_unsorted_cards","sorted_cards","update_sorted_cards","update_card_count","update_set_count","count_state","update_count_state","search_state","update_search_state","spinner_state","update_spinner_state","unique","update_unique","update_sorted","footer_state","change_footer_state","update_search_phrase","useEffect","socketIOClient","on","emit","sort_state","new_cards","i","length","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bd822188.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header() {\n    return (\n        <div className=\"header\">Quizhack</div>\n    )\n}\n\nexport default Header\n","import React, { useState } from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport CollectionsBookmarkIcon from '@material-ui/icons/CollectionsBookmark';\n\nfunction Topic(helper) {\n    const [topic, updateTopic] = useState('')\n\n    const handle_submit = e => {\n        e.preventDefault()\n        helper.fetch_topic_cards(topic)\n    }\n\n    return (\n        <form onSubmit={e => handle_submit(e)} className=\"topic_form\">\n            <div>\n                <Grid container spacing={1} alignItems=\"flex-end\">\n                    <Grid item>\n                        <CollectionsBookmarkIcon />\n                    </Grid>\n                    <Grid item>\n                        <TextField required onChange={e => updateTopic(e.target.value)} id=\"input-with-icon-grid\" label=\"Topic\" />\n                    </Grid>\n                </Grid>\n            </div>\n        </form>\n    )\n}\n\nexport default Topic","import React from 'react'\n\nexport default function Card(info) {\n    // console.log(info.prompt, info.answer, info.search_phrase);\n    let prompt = info.prompt\n    let answer = info.answer\n    let search_phrase = info.search_phrase\n    try {\n        if (info.display && \n            (prompt.toUpperCase().includes(search_phrase.toUpperCase()) \n            || answer.toUpperCase().includes(search_phrase.toUpperCase()))) {\n                if (search_phrase !== '') {\n                    let re = new RegExp(search_phrase, \"gi\");\n                    prompt = prompt.replace(re, function (x) {\n                        return `<span class=\"search_match\">` + x + `</span>`\n                    })\n                    answer = answer.replace(re, function (x) {\n                        return `<span class=\"search_match\">` + x + `</span>`\n                    })\n                }\n                return (\n                    <div className=\"cards_container\">\n                        <div className=\"card p_card\" dangerouslySetInnerHTML={{__html: prompt}}>\n                        </div>\n                        <div className=\"card a_card\" dangerouslySetInnerHTML={{__html: answer}}>\n                        </div>\n                    </div>\n                )\n        } else {\n            return (\n                <div></div>\n            )\n        }\n    } catch (error) {\n        console.log('p:', prompt, 'a:', answer, 's:', search_phrase);\n        console.log(error)\n        return (\n            <div></div>\n        )\n    }\n}\n","import React from 'react'\nimport Card from './Card';\n\nfunction Cards(helper) {\n    return (\n        <div className=\"flex_container\">\n            {helper.cards.map((card) => (\n                <Card key={card.id.toString()} prompt={card.prompt} answer={card.answer} display={card.display} search_phrase={helper.search_phrase}></Card>\n            ))}\n        </div>\n    )\n}\n\nexport default Cards\n","import React from 'react'\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nfunction Spinner(info) {\n\n    if (info.state === 0){\n        return (\n            <div></div>\n        )\n    } else {\n        return (\n            <div className=\"progress_container\">\n                <CircularProgress/>\n            </div>\n        )\n    }\n}\n\nexport default Spinner\n","import React from 'react'\n\nfunction CountInfo(data) {\n    if (data.state === 0) {\n        return (\n            <div></div>\n        )\n    } else {\n        return (\n            <div className=\"term_count_container\">\n                <span className=\"term_count\">{data.card_count}</span> total terms found from the top <span className=\"term_count\">{data.set_count}</span> sets\n            </div>\n        )\n    }\n}\n\nexport default CountInfo","import React, {useState} from 'react';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nfunction Options(data) {\n    const [uniquify, setUniquify] = useState(false)\n    const [sorted, setSorted] = useState(false)\n    \n    const handleUnique = (event) => {\n        setUniquify(event.target.checked)\n        data.apply_uniqueness(!uniquify)\n    }\n\n    const handleSorted = (event) => {\n        setSorted(event.target.checked)\n        data.apply_sort(!sorted)\n    };\n\n    return (\n        <div className=\"options_container\">\n            <FormGroup row>\n                <FormControlLabel\n                    control={<Switch checked={sorted} onChange={handleSorted} name=\"sorted\" />}\n                    label=\"Sort\"\n                />\n                <FormControlLabel\n                    control={<Switch checked={uniquify} onChange={handleUnique} name=\"uniquify\" />}\n                    label=\"Unique\"\n                />\n            </FormGroup>\n        </div>\n    )\n}\n\nexport default Options\n","import React from 'react'\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\n\nfunction Search(helper) {\n    if (helper.state) {\n        return (\n            <Grid className=\"flex_center\" container spacing={1} alignItems=\"flex-end\">\n                <Grid item>\n                    <SearchIcon/>\n                </Grid>\n                <Grid item>\n                    <TextField onChange={e => helper.apply_search(e.target.value)} id=\"input-search\" label=\"\" />\n                </Grid>\n            </Grid>\n        )\n    } else {\n        return (\n            <div></div>\n        )\n    }\n}\n\nexport default Search\n","import React from 'react'\n\nfunction Footer(type) {\n    if (type.status === 'full') {\n        return (\n            <footer className=\"footer_full\">\n                Made by <a className=\"my_link\" target=\"_blank\" href=\"https://tatia.me\" rel=\"noopener noreferrer\">Rishabh Tatia</a>.\n            </footer>\n        )\n    } else {\n        return (\n            <footer className=\"footer_short\">\n                Made by <a className=\"my_link\" target=\"_blank\" href=\"https://tatia.me\" rel=\"noopener noreferrer\">Rishabh Tatia</a>.\n            </footer>\n        )\n    }\n}\n\nexport default Footer\n","import React, { useState, useEffect } from 'react';\nimport socketIOClient from 'socket.io-client'\nimport Header from './components/Header'\nimport Topic from './components/Topic'\nimport Cards from './components/Cards'\nimport Spinner from './components/Spinner';\nimport CountInfo from './components/CountInfo'\nimport Options from './components/Options'\nimport Search from './components/Search'\nimport Footer from './components/Footer'\nimport './App.css';\n\nlet socket\n\nfunction App() {\n    const [cards, updateCards] = useState([])\n    const [unsorted_cards, update_unsorted_cards] = useState([])\n    const [sorted_cards, update_sorted_cards] = useState([])\n    const [card_count, update_card_count] = useState(0)\n    const [set_count, update_set_count] = useState(0)\n    const [count_state, update_count_state] = useState(0)\n    const [search_state, update_search_state] = useState(false)\n    const [spinner_state, update_spinner_state] = useState(0)\n    const [unique, update_unique] = useState(false)\n    const [sorted, update_sorted] = useState(false)\n    const [footer_state, change_footer_state] = useState('empty')\n    const [search_phrase, update_search_phrase] = useState('')\n\n    useEffect(() => {\n        socket = socketIOClient(\"https://quizhack.glitch.me/\");\n        socket.on('cards_update', function(data) {\n            updateCards(data.cards)\n            update_sorted_cards(data.sorted_cards)\n            update_unsorted_cards(data.unsorted_cards)\n            update_card_count(data.card_count)\n            update_set_count(data.set_count)\n            update_spinner_state(0)\n            update_count_state(1)\n            change_footer_state('full')\n            update_search_state(true)\n        })\n    }, [])\n\n    const fetch_topic_cards = topic => {\n        socket.emit('requesting_cards', {\n            topic: topic,\n            sorted: sorted,\n            unique: unique\n        })\n        updateCards([])\n        update_card_count(0)\n        update_set_count(0)\n        update_spinner_state(1)\n        update_count_state(0)\n        change_footer_state('empty')\n        update_search_state(false)\n        update_search_phrase('')\n    }\n\n    const apply_sort = sort_state => {\n        update_sorted(sort_state)\n        if (sort_state) {\n            updateCards(sorted_cards)\n        } else {\n            updateCards(unsorted_cards)\n        }\n    }\n\n    const apply_uniqueness = uniquify => {\n        let new_cards = []\n        if (uniquify) {\n            for (let i = 0; i < cards.length; i++) {\n                new_cards.push(cards[i])\n                new_cards[i].display = new_cards[i].unique\n                sorted_cards[i].display = sorted_cards[i].unique\n                unsorted_cards[i].display = unsorted_cards[i].unique\n            }\n        } else {\n            for (let i = 0; i < cards.length; i++) {\n                new_cards.push(cards[i])\n                new_cards[i].display = true\n                sorted_cards[i].display = true\n                unsorted_cards[i].display = true\n            }\n        }\n        update_unique(uniquify)\n        updateCards(new_cards)\n    }\n\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Topic fetch_topic_cards={fetch_topic_cards}/>\n            <CountInfo state={count_state} card_count={card_count} set_count={set_count}/>\n            <Options apply_sort={apply_sort} apply_uniqueness={apply_uniqueness}/>\n            <Search state={search_state} apply_search={update_search_phrase}/>\n            <Spinner state={spinner_state}/>\n            <Cards cards={cards} search_phrase={search_phrase}/>\n            <Footer status={footer_state}/>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}